body {
  overflow-x: hidden;
}

/* 1. apply fake container to all direct descendants of .gutenberg-editor, except: 
  
    1a. script/style : dont apply any styling to script/style elements
    
    1b. div.wp-block-image : img elements as divs SHOULD be the ones containing 'alignleft' & 'alignright' 
    classes, so exclude them. otheriwse the seem to be figure elements, which are fine
    
    1c. alignfull : exclude any elements that contain the alignfull class, for obvious reasons
    
    1d. uk-container-break : exclude the container breaker for obvious reasons
    
  2. apply additional fake container to the div.wp-block-image elements, except ones with class 'alignfull'. 
  this fake container will be one step wider than the main one, & act as a wrapper for the new container to
  be applied to the aligncenter, alignright & alignleft classes later
  
  3. any things with fake containers now need to have responsive padding, so do that underneath
  
  4. set aligncenter, alignleft & alignright elements to have width same as MAIN container
  
  5. set the alignwide/s container. should be 2 steps above main container respecting upper limits

*/

/* Logic for applying container's to editor content... 

  The main_wrap is the primary container for all the content
  The align_wrap_width should always be 1 step above the main_wrap, except upper limits
  The alignwide_width should always be 1 step above the align_wrap_width, except upper limits

  main_wrap: if 'expand', set to 'none'. if 'xlarge', set to '1600px'. if 'large', set to '1400px'. if 'default', set to '1200px'. if 'small', set to '900px'. if 'xsmall', set to '650px'.
  align_wrap_width: if 'expand', set to 'none'. if 'xlarge'||'large', set to '1600px'. if 'default', set to '1400px'. if 'small', set to '1200px'. if 'xsmall', set to '900px'.
  alignwide_width: if 'expand', set to 'none'. if 'xlarge'||'large'||'default', set to '1600px'. if 'small', set to '1400px'. if 'xsmall', set to '1200px'
  
  In this file we are setting some static values (where noted), as if the template margins were set to 'small', in the above logic.
  main_wrap : 900px
  align_wrap_width : 1200px
  alignwide_width : 1400px

*/

/* some rules: 

  --------------

  .wp-block-image:

  .wp-block-image elements is created as a DIV if the elements has .alignleft, .aligncenter or .alignright applied, else
  it is created as a FIGURE
  
  the child (figure) element of div.wp-block-image is what will actually have the 'alignleft' class etc...
  
  with figure.wp-block-image elements, .alignwide, .alignfull or '' may be applied to the figure element itself
  
  --------------
  
  .wp-block-cover:
  
  .wp-block-cover elements appear always to be DIVs, regardless of what 'align' is applied to them; the 'align' class will
  be applied to the actual element (div) itself. 
  
  --------------
  
  .alignwide
  
  .alignwide elements (whether wp-block-image or wp-block-cover or anything else) could be excluded from the initial 
  containers & have their own specific one applied. The .alignwide container would be 2 steps bigger than the main 
  container, respecting upper limits. This would then need its own padding
  
  --------------
  
  .alignfull
  
  .alignfull is just excluded altogether....


*/

/* apply fake containers (default 1200px) to all elements inside .gutenberg-editor, with exceptions 

  script : inline scripts gets displayed as outut otherwise!
  style : same as scripts
  div.wp-block-image : these elements will have their own internal align classes to apply containers to later
  .alignfull : obvs we dont want to contain alignfull elements
  .uk-container-break : same as alignfull
  
  only div.wp-block-image has 'alignleft', 'alignright' or 'aligncenter' children (or so it seems), so except this. 
  figure.wp-block-image is for 'alignnone' so this should be contained (shoudlnt be excepted here)

*/

.gutenberg-editor > *:not(script, style, div.wp-block-image, .alignfull, .uk-container-break)
{
  box-sizing: content-box;
  display: flow-root;
  margin-left: auto;
  margin-right: auto;
  max-width: 900px;  /* main_wrap : the MAIN container width of content. */
  padding-left: 15px;
  padding-right: 15px;
}
/* .gutenberg-editor > div.wp-block-image:not(.alignfull) */
.gutenberg-editor > div.wp-block-image
{
  box-sizing: content-box;
  display: flow-root;
  margin-left: auto;
  margin-right: auto;
  max-width: 1200px; /* align_wrap_width : the container width of 'align' elements. */
  padding-left: 15px;
  padding-right: 15px;
}

/* apply responsive paddings to the fake containers 

*/
@media (min-width: 640px) {
  .gutenberg-editor > *:not(script, style, div.wp-block-image, .alignfull, .uk-container-break),
  .gutenberg-editor > div.wp-block-image:not(.alignfull)
  {
    padding-left: 30px;
    padding-right: 30px;
  }
}
@media (min-width: 960px) {
  .gutenberg-editor > *:not(script, style, div.wp-block-image, .alignfull, .uk-container-break),
  .gutenberg-editor > div.wp-block-image:not(.alignfull)
  {
    padding-left: 40px; /* template margins = 'expand' would set this to 20px!important */
    padding-right: 40px; /* template margins = 'expand' would set this to 20px!important */
  }
}

/* 
  apply uk-container-xsmall styles to .wp-block-image > alignleft|right|center elements 
*/

/* deal with .wp-block-image's 'align' descendants 

  these need containing to a xsmall width. this is because 'align' settings should always result in
  a xsmall-contained element inside the MAIN container
  
  .alignwide elements should obvs get the xlarge container treatment

*/
.gutenberg-editor > div.wp-block-image .aligncenter,
.gutenberg-editor > div.wp-block-image .alignleft,
.gutenberg-editor > div.wp-block-image .alignright
{
  margin-left: auto;
  margin-right: auto;
  max-width: 900px!important; /* main_wrap : the true width of 'align-ed' elements. should be same as container */
}
/* deal with .alignwide 
  
  .alignwide elements should obvs get the xlarge container treatment

*/
.gutenberg-editor > .alignwide,
.gutenberg-editor > .wp-block-image.alignwide,
.gutenberg-editor > .wp-block-cover.alignwide
{
  margin-left: auto;
  margin-right: auto;
  max-width: 1400px!important; /* alignwide_width : the container width of 'alignwide' elements. set to large */
}

/* should alignwide have padding ? */
.uuuk-container-break .aaalignwide {
  max-width: 1600px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 15px;
  padding-right: 15px;
}

/* fixing other gutenberg elements 

  to work inside our
  fake containers
  from above. These elements
  will be direct
  descendants of .gutenberg-editor
  
*/

/* text blocks */
.gutenberg-editor > .wp-block-text-columns, .gutenberg-editor > .wp-block-text-columns.aligncenter {
  display: flex!important;
}
.gutenberg-editor > .wp-block-columns {
  display: flex!important;
  margin-bottom: 1.75em!important;
  box-sizing: border-box!important;
  flex-wrap: wrap!important;
}

/* code blocks */
.gutenberg-editor > pre {
  background: none;
  border: none;
  border-radius: 0x;
  color: unset;
  font: unset;
}
.gutenberg-editor > .wp-block-code code {
  display: block;
  white-space: pre-wrap;
  overflow-wrap: break-word;
  background-color: #fff;
  overflow: auto;
  padding: 10px;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  border: 1px solid #e5e5e5;
  border-radius: 3px;
  color: #666;
  font: 0.875rem/1.5 Consolas,monaco,monospace;
}

/* ul li items */
.gutenberg-editor > ul > li {
  margin: 0.5rem 0 0 2rem;
}

/* hr separators */
.gutenberg-editor > hr {
  padding-left: 0!important;
  padding-right: 0!important;
}

/* embeds */
.gutenberg-editor > .wp-block-embed {
  word-wrap: break-word;
}

/* gallery */
figure.wp-block-gallery {
  display: flex!important;
}

/* covers */

/* alignwide fix */
.wp-block-cover:not(.alignfull), 
.wp-block-cover-image:not(.alignfull) {
  display: flex!important;
  width: auto!important;
}
.wp-block-cover:not(.alignfull) .wp-block-cover__gradient-background {
  margin: 0 20px!important;
  z-index: 20!important;
}
.wp-block-cover:not(.alignfull) .wp-block-cover__image-background {
  margin: 0 20px!important;
  width: calc(100% - 40px)!important;
  object-fit: cover!important;
  z-index: 19!important;
}
.wp-block-cover:not(.alignfull) .wp-block-cover__inner-container {
  z-index: 23!important;
}
.wp-block-cover .wp-block-cover__inner-container {
  position: relative!important;
  color: #ffffff!important;
}
.wp-block-cover .wp-block-cover__inner-container > p {
  margin: 0!important;
}